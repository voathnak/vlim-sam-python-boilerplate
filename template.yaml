AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  vlim-sam-python-boilerplate

  Sample SAM Template for vlim-sam-python-boilerplate



Globals:
  Function:
    Timeout: 60
    Environment:
      Variables:
        DB_NAME: "vlim-co-sam-python-boilerplate"
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'content-type, Authorization'"
      AllowOrigin: "'*'"
      AllowCredentials: "'*'"



Parameters:
  DatabaseUri: # Changed this to remove underscore
    Description: 'Required. MongoDB connection URL'
    Type: 'String'
    Default: "mongodb+srv://vlim:bLgOTWoUvI4kaUtN@vlim-sam-python-mongodb.qzg3k.mongodb.net/vlim-co-sam-python-boilerplate?retryWrites=true&w=majority"
  DeploymentS3BucketName:
    Type: String
    Description: The name of the S3 bucket in which the Swagger specification is stored
  StageName:
    Type: String
    Description: The name of the stage, e.g. "dev", "preprod", "prod"
    Default: dev
  AppName:
    Type: String
    Description: The name of the APP
    Default: vlim-co-sam-python-boilerplate



Resources:
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: ${AppName}-${StageName}-api-gateway
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: '/*' # allows for logging on any resource
          HttpMethod: '*' # allows for logging on any method
      StageName:
        Ref: StageName


  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AppName}-${StageName}-HelloWorld
      CodeUri: src/hello_world/
      Handler: app.lambda_handler
      Runtime: python3.8
      Events:
        HelloWorld:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApi
            Path: /hello
            Method: get
      Layers:
        - !Ref PythonLibs


  todoFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AppName}-${StageName}-createTodo
      CodeUri: src/todos/
      Handler: handler.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          MONGODB_URI: !Ref DatabaseUri
      Events:
        createTodo:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApi
            Path: /todos
            Method: post
        listTodo:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApi
            Path: /todos
            Method: get
        getTodoByID:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApi
            Path: /todos/{id}
            Method: get
        deleteTodo:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApi
            Path: /todos/{id}
            Method: delete
        updateTodo:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApi
            Path: /todos/{id}
            Method: put
      Layers:
        - !Ref PythonLibs
        - !Ref CoreLibs



  createUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AppName}-${StageName}-createUser
      CodeUri: src/users/
      Handler: create.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          MONGODB_URI: !Ref DatabaseUri
      Events:
        createUser:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApi
            Path: /users
            Method: post
        registerUser:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApi
            Path: /users/register
            Method: post
      Layers:
        - !Ref PythonLibs
        - !Ref CoreLibs


  listUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AppName}-${StageName}-listUser
      CodeUri: src/users/
      Handler: list.user_list
      Runtime: python3.8
      Environment:
        Variables:
          MONGODB_URI: !Ref DatabaseUri
      Events:
        listUser:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApi
            Path: /users
            Method: get
      Layers:
        - !Ref PythonLibs
        - !Ref CoreLibs


  authenticateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AppName}-${StageName}-authenticateUser
      CodeUri: src/users/
      Handler: authenticate.authenticate_handler
      Runtime: python3.8
      Environment:
        Variables:
          MONGODB_URI: !Ref DatabaseUri
      Events:
        authenticateUser:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApi
            Path: /users/authenticate
            Method: post
      Layers:
        - !Ref PythonLibs
        - !Ref CoreLibs


  getUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AppName}-${StageName}-getUser
      CodeUri: src/users/
      Handler: get.get
      Runtime: python3.8
      Environment:
        Variables:
          MONGODB_URI: !Ref DatabaseUri
      Events:
        getUser:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApi
            Path: /users/{itemId}
            Method: get
      Layers:
        - !Ref PythonLibs
        - !Ref CoreLibs


  updateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AppName}-${StageName}-updateUser
      CodeUri: src/users/
      Handler: update.update
      Runtime: python3.8
      Environment:
        Variables:
          MONGODB_URI: !Ref DatabaseUri
      Events:
        updateUser:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApi
            Path: /users/{itemId}
            Method: put
      Layers:
        - !Ref PythonLibs
        - !Ref CoreLibs


  deleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AppName}-${StageName}-deleteUser
      CodeUri: src/users/
      Handler: delete.delete
      Runtime: python3.8
      Environment:
        Variables:
          MONGODB_URI: !Ref DatabaseUri
      Events:
        deleteUser:
          Type: Api
          Properties:
            RestApiId:
              Ref: RestApi
            Path: /users/{itemId}
            Method: delete
      Layers:
        - !Ref PythonLibs
        - !Ref CoreLibs




  CoreLibs:
    Type: 'AWS::Serverless::LayerVersion'
    Properties:
      ContentUri: layer/core
      CompatibleRuntimes: # optional
        - python3.8



  PythonLibs:
    Type: 'AWS::Serverless::LayerVersion'
    Properties:
      ContentUri: layer/python_libs
      CompatibleRuntimes: # optional
        - python3.8



Outputs:
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
